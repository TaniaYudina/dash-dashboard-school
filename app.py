{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e0425add-91d0-4360-a82c-f5d22b70eea3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",   
    "from dash import dcc, html\n",
    "from dash.dependencies import Input, Output\n",
    "from dash import Input, Output\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.graph_objs as go\n",
    "import plotly.express as px\n",
    "from plotly.subplots import make_subplots\n",
    "import dash_bootstrap_components as dbc\n",
    "from dash import dash_table\n",
    "from flask import Flask, send_file\n",
    "import requests\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1410d7d7-a418-4737-ba3c-c9c109ac102a",
   "metadata": {},
   "outputs": [],
   "source": [
    "deals= pd.read_excel('data/Deals.xlsx', dtype={'Id': 'Int64', 'CONTACTID':'Int64'})\n",
    "cnts= pd.read_excel('data/Contacts.xlsx', dtype={'Id': 'Int64'})\n",
    "calls= pd.read_excel('data/Calls.xlsx', dtype={'Id': 'Int64', 'CONTACTID': 'Int64'})\n",
    "acts = pd.read_excel('data/Activity.xlsx')\n",
    "source = pd.read_excel('data/Source.xlsx')\n",
    "campaign = pd.read_excel('data/Campaign.xlsx')\n",
    "spend = pd.read_excel('data/Spends.xlsx')\n",
    "city = pd.read_excel('data/Geos.xlsx')\n",
    "payment = pd.read_excel('data/Payment.xlsx', dtype={'Id': 'Int64'})\n",
    "df_course_paid = payment[payment['Category'] != 'New']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b1813b5-4e81-42e5-9989-81db2d221cd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ABOUT block\n",
    "\n",
    "def count_students():\n",
    "  var = df_course_paid['Id'].count()\n",
    "  return var\n",
    "    \n",
    "def count_country():\n",
    "  var = city['Country'].nunique()\n",
    "  return var\n",
    "\n",
    "def cart():\n",
    "  country_counts = city['Country'].value_counts()\n",
    "  countries_more_than_one = country_counts[country_counts > 1].index\n",
    "  city_more_one = city[city['Country'].isin(countries_more_than_one)]\n",
    "  fig = px.scatter_geo(city_more_one , lat='Latitude', lon='Longitude', hover_name='City', projection='natural earth',\n",
    "                      color='Country', color_discrete_sequence=px.colors.qualitative.Vivid, height=500)\n",
    "  fig.update_geos( visible=False, resolution=50,  showcountries=True,  showsubunits=True,  lataxis_range=[35, 70],   lonaxis_range=[-25, 45]  )\n",
    "  return fig\n",
    "\n",
    "def paid_course():\n",
    "  df = df_course_paid.groupby(['Product','Education Type', 'Tariff Plan', 'Payment Type']).size().reset_index(name='Count')\n",
    "  fig = px.sunburst(df, path=['Product','Education Type', 'Tariff Plan', 'Payment Type'], values='Count',  height=520)\n",
    "  fig.update_traces(textinfo=\"label+percent entry\")\n",
    "  return fig\n",
    "\n",
    "def country_category():\n",
    "  df = city.groupby('Country')['City Count'].sum().reset_index(name='Count')\n",
    "  df = df.sort_values('Count', ascending=False).head(5)\n",
    "  df['Percentage'] = df['Count'] / df['Count'].sum() * 100\n",
    "  df = df.sort_values(by='Count', ascending=True)\n",
    "  fig = px.bar(df, x='Count', y='Country', orientation='h', text_auto=True,  hover_data={'Percentage': ':.2f%'})\n",
    "  fig.update_layout( xaxis_title=None, yaxis_title=None, height=240, bargap=0.2, title={'text': 'Countries', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 14}} ) \n",
    "  fig.update_traces(insidetextfont=dict(size=12, color='white'))\n",
    "  fig.update_traces(hovertemplate='%{y} <br> %{x} <br> %{customdata[0]:.2f}%')\n",
    "  return fig\n",
    "\n",
    "\n",
    "def course_category():\n",
    "  df = df_course_paid['Tariff Plan'].value_counts().reset_index(name=\"Count\")\n",
    "  df['Percentage'] = df['Count'] / df['Count'].sum() * 100\n",
    "  df = df.sort_values(by='Count', ascending=True)\n",
    "  fig = px.bar(df, x='Count', y='Tariff Plan', orientation='h', text_auto=True,  hover_data={'Percentage': ':.2f%'})\n",
    "  fig.update_layout( xaxis_title=None, yaxis_title=None, height=240, bargap=0.2,  title={'text': 'Tariff Plan', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 14}} )\n",
    "  fig.update_traces(insidetextfont=dict(size=12, color='white'))\n",
    "  fig.update_traces(hovertemplate='%{y} <br> %{x} <br> %{customdata[0]:.2f}%')\n",
    "  return fig\n",
    "\n",
    "def payment_category():\n",
    "  df = df_course_paid['Payment Type'].value_counts().reset_index(name=\"Count\")\n",
    "  df['Percentage'] = df['Count'] / df['Count'].sum() * 100\n",
    "  df = df.sort_values(by='Count', ascending=True)\n",
    "  fig = px.bar(df, x='Count', y='Payment Type', orientation='h', text_auto=True,  hover_data={'Percentage': ':.2f%'})\n",
    "  fig.update_layout( xaxis_title=None, yaxis_title=None, height=240, bargap=0.2, title={'text': 'Payment Type', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 14}} )              \n",
    "  fig.update_traces(insidetextfont=dict(size=12, color='white'))\n",
    "  fig.update_traces(hovertemplate='%{y} <br> %{x} <br> %{customdata[0]:.2f}%')\n",
    "  return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1f5cfab6-a961-438b-a3f9-490585377a91",
   "metadata": {},
   "outputs": [],
   "source": [
    "#OPERATORS block\n",
    "\n",
    "def operator_load(table_name):\n",
    "  if table_name != 'Calls Duration':\n",
    "    if table_name == 'All Activities':\n",
    "      dd = acts.groupby(['Year-Month', 'Owner Name']).size().reset_index(name='Count')\n",
    "    else:\n",
    "      dd = acts[acts['Category'] == table_name].groupby(['Year-Month', 'Owner Name']).size().reset_index(name='Count')\n",
    "  else:\n",
    "      dd = calls[calls['Call Duration'] > 0].groupby(['Year-Month', 'Owner Name'])['Call Duration'].mean().round(0).reset_index(name='Count')\n",
    "\n",
    "  pivot_dd = dd.pivot(index='Owner Name', columns='Year-Month', values='Count').sort_values('Owner Name', ascending=True)\n",
    "  pivot_dd.columns = pivot_dd.columns.astype(str)\n",
    "  fig = px.imshow(pivot_dd, text_auto=True, color_continuous_scale=px.colors.sequential.Blues )\n",
    "  fig.update_layout(title=None, xaxis_title=None, yaxis_title=None, plot_bgcolor='white',)\n",
    "  fig.update_xaxes(side=\"top\")\n",
    "  #fig.update_xaxes( dtick=\"M1\",  tickformat=\"%b %Y\",   tickmode='linear')\n",
    "  return fig\n",
    "\n",
    "def act_category_time(df, table_name):\n",
    "  global acts, cnts,  deals, calls\n",
    "  if table_name != 'Calls Duration':\n",
    "    res_by_tab = df.groupby('Year-Month')['Category'].value_counts().reset_index(name='Count')\n",
    "  else:\n",
    "    res_by_tab = calls.groupby('Year-Month')['Duration Category'].value_counts().reset_index(name='Count')\n",
    "    res_by_tab = res_by_tab.rename(columns={'Duration Category': 'Category'})\n",
    "  # Получаем уникальные категории\n",
    "  unique_categories = res_by_tab['Category'].unique()\n",
    "  # Генерируем цветовую карту\n",
    "  color_map = generate_color_map(sorted(unique_categories))\n",
    "\n",
    "  res_by_tab['Percent'] = res_by_tab.groupby('Year-Month')['Count'].transform(lambda x: 100 * x / x.sum())\n",
    "  # Заменяем названия категорий на Mapped Category\n",
    "  res_by_tab['Mapped Category'] = res_by_tab['Category'].map(color_map)\n",
    "  fig = px.bar(res_by_tab, x=\"Year-Month\", y=\"Count\", color=\"Category\", color_discrete_map=color_map, hover_data={'Percent': ':.2f'})\n",
    "  fig.update_layout(title=None, xaxis_title=None, yaxis_title=None, legend=dict(title=None, orientation=\"h\",  yanchor=\"bottom\",  y=1.02,  xanchor=\"right\",  x=1))\n",
    "  #fig.update_xaxes( dtick=\"M1\",  tickformat=\"%b %Y\",   tickmode='linear')\n",
    "  return fig\n",
    "\n",
    "def operator_load_category(df, table_name):\n",
    "  global acts, cnts, calls, deals\n",
    "  if table_name != 'Calls Duration':\n",
    "    df = df.groupby('Category')['Owner Name'].value_counts().reset_index(name='Count')\n",
    "  else:\n",
    "    df = calls.groupby('Duration Category')['Owner Name'].value_counts().reset_index(name='Count')\n",
    "    df = df.rename(columns={'Duration Category': 'Category'})\n",
    "  # Получаем уникальные категории\n",
    "  unique_categories = df['Category'].unique()\n",
    "  # Генерируем цветовую карту\n",
    "  color_map = generate_color_map(sorted(unique_categories))\n",
    "  df['Percent'] = df.groupby('Owner Name')['Count'].transform(lambda x: 100 * x / x.sum())\n",
    "  df = df.sort_values('Owner Name', ascending=False)\n",
    "  fig = px.bar(df, y='Owner Name', x='Count',  color='Category', color_discrete_map=color_map, title=None,  orientation='h',  hover_data={'Percent': ':.2f'}    )\n",
    "  fig.update_layout( title=None, xaxis_title=None, yaxis_title=None,  legend=dict(title=None, orientation=\"h\",  yanchor=\"bottom\",  y=1.04,  xanchor=\"right\",  x=1))\n",
    "  fig.update_xaxes(side=\"top\")\n",
    "  return fig\n",
    "\n",
    "def avg_act_time(table_name):\n",
    "\n",
    "  if table_name != 'Calls Duration':\n",
    "    dd = acts.copy()\n",
    "    dd.set_index('Date', inplace=True)\n",
    "    if table_name == 'All Activities':\n",
    "      dd = dd\n",
    "    else:\n",
    "      dd = dd[dd['Category'] == table_name]\n",
    "\n",
    "    # Считаем количество записей по каждому владельцу по дням\n",
    "    daily_counts = dd.groupby(['Owner Name']).resample('D').size().reset_index(name='Count')\n",
    "    daily_average = daily_counts.groupby('Date')['Count'].mean().reset_index(name='Average Count')\n",
    "\n",
    "    # Считаем количество записей по каждому владельцу по неделям\n",
    "    weekly_counts = dd.groupby(['Owner Name']).resample('W').size().reset_index(name='Count')\n",
    "    weekly_average = weekly_counts.groupby('Date')['Count'].mean().reset_index(name='Average Count')\n",
    "\n",
    "    # Считаем количество записей по каждому владельцу по месяцам\n",
    "    monthly_counts = dd.groupby(['Owner Name']).resample('ME').size().reset_index(name='Count')\n",
    "    monthly_average = monthly_counts.groupby('Date')['Count'].mean().reset_index(name='Average Count')\n",
    "  if table_name == 'Calls Duration':\n",
    "    dd = calls.copy()\n",
    "    dd = dd.rename(columns={'Call Start Time': 'Date'})\n",
    "    dd.set_index('Date', inplace=True)               \n",
    "    if 'Call Duration' in dd.columns and not dd['Call Duration'].isnull().all():\n",
    "        daily_counts = dd.groupby(['Owner Name']).resample('D')['Call Duration'].mean().reset_index(name='Count')\n",
    "        daily_average = daily_counts.groupby('Date')['Count'].mean().reset_index(name='Average Count')\n",
    "        \n",
    "        # Считаем количество записей по каждому владельцу по неделям\n",
    "        weekly_counts = dd.groupby(['Owner Name']).resample('W')['Call Duration'].mean().reset_index(name='Count')\n",
    "        weekly_average = weekly_counts.groupby('Date')['Count'].mean().reset_index(name='Average Count')\n",
    "        \n",
    "        # Считаем количество записей по каждому владельцу по месяцам\n",
    "        monthly_counts = dd.groupby(['Owner Name']).resample('ME')['Call Duration'].mean().reset_index(name='Count')\n",
    "        monthly_average = monthly_counts.groupby('Date')['Count'].mean().reset_index(name='Average Count')\n",
    "\n",
    "  fig = make_subplots()\n",
    "    # Добавляем линии для каждого периода (по дням скрыто по умолчанию)\n",
    "  fig.add_trace(go.Scatter(x=daily_average['Date'], y=daily_average['Average Count'],  hovertemplate='Date: %{x}<br>Average Count: %{y:.1f}', name='daily',\n",
    "                          mode='lines', visible=True))\n",
    "\n",
    "  # Среднее по неделям будет видно по умолчанию\n",
    "  fig.add_trace(go.Scatter(x=weekly_average['Date'], y=weekly_average['Average Count'], hovertemplate='Date: %{x}<br>Average Count: %{y:.1f}', name='weekly',\n",
    "                          mode='lines', visible=False))\n",
    "\n",
    "  # Среднее по месяцам скрыто по умолчанию\n",
    "  fig.add_trace(go.Scatter(x=monthly_average['Date'], y=monthly_average['Average Count'], hovertemplate='Date: %{x}<br>Average Count: %{y:.1f}', name='monthly',\n",
    "                          mode='lines', visible=False))\n",
    "\n",
    "  # Обновление видимости линий в зависимости от выбранной кнопки\n",
    "  buttons = [\n",
    "      dict(method='update',\n",
    "          label='by days',\n",
    "          args=[{'visible': [True, False, False]}]),  # Показывать только среднее по дням\n",
    "      dict(method='update',\n",
    "          label='by weeks',\n",
    "          args=[{'visible': [False, True, False]}]),  # Показывать только среднее по неделям\n",
    "      dict(method='update',\n",
    "          label='by months',\n",
    "          args=[{'visible': [False, False, True]}]),  # Показывать только среднее по месяцам\n",
    "\n",
    "  ]\n",
    "\n",
    "  # Добавление кнопок и отключение легенды\n",
    "  fig.update_layout(\n",
    "      title=None, xaxis_title=None, yaxis_title=None, margin=dict(t=0, l=0, r=0, b=0), \n",
    "      updatemenus=[dict(type='dropdown', buttons=buttons, direction='down', showactive=True,  yanchor=\"bottom\",  y=1.02,  xanchor=\"left\",  x=0)], )\n",
    "  return fig\n",
    "\n",
    "def generate_color_map(categories):\n",
    "    # Генерируем уникальные цвета для каждой категории\n",
    "    colors = px.colors.diverging.Picnic#px.colors.qualitative.Set1  \n",
    "\n",
    "    # Если количество категорий больше, чем доступных цветов, дублируем цвета\n",
    "    color_map = {category: colors[i % len(colors)] for i, category in enumerate(categories)}\n",
    "\n",
    "    return color_map\n",
    "\n",
    "def create_category_act(df, table_name):\n",
    "    global acts, cnts, calls, deals\n",
    "\n",
    "    if table_name != 'Calls Duration':\n",
    "      if table_name == 'Contacts':\n",
    "        df = df.groupby(['Category', 'Description']).size().reset_index(name='Count')\n",
    "      else:\n",
    "        df = df.groupby('Category').size().reset_index(name='Count')\n",
    "    else:\n",
    "      df = calls.groupby('Duration Category').size().reset_index(name='Count')\n",
    "      df = df.rename(columns={'Duration Category': 'Category'})\n",
    "\n",
    "\n",
    "    # Получаем уникальные категории\n",
    "    unique_categories = df['Category'].unique()\n",
    "    # Генерируем цветовую карту\n",
    "    color_map = generate_color_map(sorted(unique_categories))\n",
    "\n",
    "    # Расчет процента для каждой категории\n",
    "    df['Percent'] = (df['Count'] / df['Count'].sum()) * 100\n",
    "\n",
    "    if table_name == 'Contacts':\n",
    "        # Если столбец 'Description' существует, используем его\n",
    "        df['Label'] = df['Category'] + '<br>' + df['Count'].astype(str) + ' (' + df['Percent'].round(2).astype(str) + '%)' + '<br>' + df['Description']\n",
    "    else:\n",
    "        # Если столбца нет, создаем метку без описания\n",
    "        df['Label'] = df['Category'] + '<br>' + df['Count'].astype(str) + ' (' + df['Percent'].round(2).astype(str) + '%)'\n",
    "\n",
    "    # Построение простой древовидной диаграммы (квадратной), используя категорию и количество\n",
    "    fig = px.treemap(df, path=['Category'], values='Count',  color='Category', color_discrete_map=color_map)\n",
    "\n",
    "    # Обновление графика: добавление текста в центр квадрата, увеличение шрифта и отключение данных при наведении\n",
    "    fig.update_traces(\n",
    "        root_color=\"lightgrey\",\n",
    "        text=df['Label'],  # Передаем текст с описаниями и данными\n",
    "        texttemplate='%{text}',  # Используем переданный текст\n",
    "        textposition=\"middle center\",  # Размещение текста по центру\n",
    "        hoverinfo='none',  # Отключение данных при наведении\n",
    "        textfont_size=12  # Увеличиваем шрифт (в два раза, исходя из стандартного значения ~12)\n",
    "    )\n",
    "\n",
    "    # Убираем корневую группу 'All' (уменьшаем отступы)\n",
    "    fig.update_layout(title='Category', title_x=0.5, margin=dict(t=0, l=0, r=0, b=0) )\n",
    "    return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d6e0212d-2916-451f-9513-1fdf431ba5a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MARKETING block\n",
    "\n",
    "def sourses_graph(value_vars):\n",
    "\n",
    "    df = source[['Source', 'CTR', 'Convers UA', 'Convers C1', 'CPC', 'CAC', 'CPA', 'ARPU', 'CRR', 'MER']].round(2)\n",
    "\n",
    "    sources_to_exclude = ['CRM', 'Offline', 'Organic', 'Partnership']\n",
    "    # Исключаем строки, где значения в колонке 'Source' совпадают с указанными\n",
    "    df = df[~df['Source'].isin(sources_to_exclude)]\n",
    "\n",
    "    # Преобразуем DataFrame в длинный формат\n",
    "    df_melted = df.melt(id_vars='Source', value_vars=value_vars, var_name='Metric', value_name='Value')\n",
    "\n",
    "    # Создаем гистограмму\n",
    "    fig = px.histogram(df_melted, x='Source', y='Value', color='Metric', barmode='group', height=400, color_discrete_sequence=px.colors.diverging.Picnic)\n",
    "\n",
    "    # Если выбранная группа group3, добавляем логарифмическую шкалу\n",
    "    if value_vars == ['ARPU', 'CRR', 'MER']:\n",
    "        fig.update_yaxes(type='log')\n",
    "    fig.update_layout(xaxis_title=None, yaxis_title=None, legend=dict(title=None, orientation=\"h\",  yanchor=\"bottom\",  y=1.04,  xanchor=\"right\",  x=1))\n",
    "    fig.update_layout(margin=dict(l=20, r=20, t=20, b=20))\n",
    "    return fig\n",
    "    \n",
    "def spend_by_month():\n",
    "  sources_to_exclude = ['CRM', 'Offline', 'Organic', 'Partnership']\n",
    "  spend_filter = spend[~spend['Source'].isin(sources_to_exclude)]\n",
    "  spends_by_month = spend_filter.groupby(['Year-Month', 'Source'])['Spend'].sum().reset_index(name='Sum_spend')\n",
    "  pivot_data = spends_by_month.pivot(index='Source', columns='Year-Month', values='Sum_spend')\n",
    "  fig = px.imshow(pivot_data, text_auto=True, color_continuous_scale=px.colors.sequential.Blues )\n",
    "  fig.update_layout(title='Spending by Source and Month', title_x=0.5, xaxis_title=None, yaxis_title=None, plot_bgcolor='white')\n",
    "  return fig\n",
    "    \n",
    "def pie_source():\n",
    "  pie_source = spend.groupby('Source')['Campaign'].nunique().reset_index()\n",
    "  pie_source = pie_source[pie_source['Campaign'] > 0]\n",
    "  aquamarine_colors = ['#00BFFF', '#40E0D0', '#48D1CC', '#20B2AA', '#008B8B']\n",
    "\n",
    "  fig = go.Figure(data=[go.Pie(labels=pie_source['Source'], values=pie_source['Campaign'], hole=0.5, marker=dict(colors=aquamarine_colors) )])\n",
    "  fig.update_layout(\n",
    "      title_text=\"Campaigns by Source\", title_x=0.44,\n",
    "      annotations=[dict(text='Sources', x=0.5, y=0.5, font_size=20, showarrow=False)],\n",
    "\n",
    "  )\n",
    "  return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4ee58108-9355-4455-8538-b912a1588cbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#DEALS block\n",
    "\n",
    "#activity of advertising companies\n",
    "def advert_activity():\n",
    "    campaign_by_month = spend.groupby('Year-Month')['Campaign'].count()\n",
    "    fig = px.line(campaign_by_month, x=campaign_by_month.index,   y=campaign_by_month.values)\n",
    "    fig.update_layout(  xaxis_title=None,       yaxis_title=None,  title=dict(text='Activity of Advertising Campanies', x=0.5, y=0.9))\n",
    "    return fig\n",
    "#lead generation\n",
    "def lead_generation():\n",
    "    leads_by_month = payment.groupby('Year-Month').size().reset_index(name='Count')\n",
    "    fig = px.line(leads_by_month, x='Year-Month',   y='Count')\n",
    "    fig.update_layout(  xaxis_title=None,       yaxis_title=None,  title=dict(text='Lead Generation', x=0.5, y=0.9) )\n",
    "    return fig\n",
    "#successful deals\n",
    "def success_deals():\n",
    "    study_by_month = payment[payment['Category'] != 'New'].groupby(['Product', 'Year-Month']).size().reset_index(name='Count')\n",
    "    fig = px.line(study_by_month,    x='Year-Month',    y='Count',    color='Product',     \n",
    "                  labels={'Count': 'Number of Students', 'Year-Month': 'Month'},  line_shape='linear', \n",
    "                  color_discrete_sequence=['royalblue', 'deepskyblue', 'blue'])      \n",
    "    fig.update_layout(\n",
    "        title=dict(text='Successful Deals', x=0.5, y=0.96),  xaxis_title=None,  yaxis_title=None  ,\n",
    "        legend=dict(x=0.7, y=0.98))\n",
    "    return fig\n",
    "\n",
    "#Closed Deals & Average Deal Duration\n",
    "def problem_deals():\n",
    "    monthly_deals = deals.groupby('Year-Month').agg( total_closed=('Id', 'count'), avg_duration=('Deals Duration', 'mean') ).reset_index()\n",
    "    trace1 = go.Bar( x=monthly_deals['Year-Month'].astype(str),  y=monthly_deals['total_closed'],  name='Closed Deals',  marker_color='royalblue',\n",
    "        yaxis='y1')\n",
    "    trace2 = go.Scatter( x=monthly_deals['Year-Month'].astype(str), y=monthly_deals['avg_duration'], name='Average Deal Duration', mode='lines+markers',\n",
    "        marker_color='skyblue', yaxis='y2' )\n",
    "    fig = go.Figure(data=[trace1, trace2])\n",
    "    fig.update_layout(\n",
    "        title=dict(text='Closed Deals & Average Deal Duration', x=0.5, y=0.96),\n",
    "        xaxis=dict(title=None),\n",
    "        yaxis=dict(\n",
    "            title='Closed Deals',\n",
    "            titlefont=dict(color='royalblue'),\n",
    "            tickfont=dict(color='royalblue'),\n",
    "            side='left'\n",
    "        ),\n",
    "        yaxis2=dict(\n",
    "            title='Average Deal Duration (days)',\n",
    "            titlefont=dict(color='deepskyblue'),\n",
    "            tickfont=dict(color='deepskyblue'),\n",
    "            overlaying='y',\n",
    "            side='right'\n",
    "        ),\n",
    "        showlegend=False     \n",
    "    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "#by product\n",
    "def products():\n",
    "    products = payment['Product'].dropna().unique().tolist()\n",
    "    \n",
    "    product_data = {}\n",
    "    for product in products:\n",
    "        dd = payment[payment['Product'] == product].groupby(['Year-Month', 'Months of study'])['Id'].count().reset_index(name='Count')\n",
    "        pivot_dd = dd.pivot(index='Year-Month', columns='Months of study', values='Count').fillna(0)\n",
    "        product_data[product] = pivot_dd\n",
    "    fig = go.Figure()\n",
    "    for product in products:\n",
    "        fig.add_trace(go.Heatmap(\n",
    "            z=product_data[product].values,\n",
    "            x=product_data[product].columns,\n",
    "            y=product_data[product].index,\n",
    "            visible=(product == products[0]),  \n",
    "            colorscale= 'Portland',\n",
    "            text=product_data[product].values,\n",
    "            texttemplate='%{text:.0f}',  \n",
    "            name=product\n",
    "        ))\n",
    "    buttons = [\n",
    "        dict(label=product,\n",
    "             method=\"update\",\n",
    "             args=[{\"visible\": [product == p for p in products]},  \n",
    "                   {\"title\": f\"Number of Students in '{product}'\"}])  \n",
    "        for product in products\n",
    "    ]\n",
    "    fig.update_layout(\n",
    "        updatemenus=[{\n",
    "            \"buttons\": buttons,\n",
    "            \"direction\": \"down\",\n",
    "            \"showactive\": True,\n",
    "            \"x\": 0.01,\n",
    "            \"xanchor\": \"left\",\n",
    "            \"y\": 1.2,\n",
    "            \"yanchor\": \"top\"\n",
    "        }],\n",
    "        title=dict(text=f\"Number of Students in '{products[0]}'\", x=0.5, y=0.9),      \n",
    "        xaxis_title=\"Months of study\",\n",
    "        yaxis_title=None,\n",
    "        yaxis=dict(autorange='reversed')  \n",
    "    )\n",
    "    \n",
    "    return fig\n",
    "\n",
    "def funnel():    \n",
    "    funnel_data_total = pd.DataFrame({\n",
    "    'Leads': [payment['Category'].count()], \n",
    "    'First Month Paid': [payment[payment['Category'] != 'New']['Category'].count()],  \n",
    "    'Students': [payment[payment['Months of study'] > 0]['Category'].count()], \n",
    "    'Finished Course': [payment[payment['Months of study'] == payment['Course duration']]['Category'].count()]  \n",
    "    })  \n",
    "    funnel_data_total = funnel_data_total.melt(\n",
    "        value_vars=['Leads', 'First Month Paid', 'Students', 'Finished Course'],\n",
    "        var_name=\"Stage\", value_name=\"Count\")\n",
    "    \n",
    "    funnel_data_total['Previous Count'] = funnel_data_total['Count'].shift(1).fillna(0)\n",
    "    funnel_data_total['Conversion'] = (funnel_data_total['Count'] / funnel_data_total['Previous Count'] * 100).fillna(0)\n",
    "    \n",
    "    total_leads = funnel_data_total.loc[funnel_data_total['Stage'] == 'Leads', 'Count'].values[0]\n",
    "    funnel_data_total['Percentage'] = (funnel_data_total['Count'] / total_leads * 100).round(2)\n",
    "\n",
    "    fig = go.Figure(go.Funnel(\n",
    "            y=funnel_data_total['Stage'],\n",
    "            x=funnel_data_total['Count'],\n",
    "            name=\"Quantity\",\n",
    "            marker=dict(color='royalblue')\n",
    "        ))\n",
    "\n",
    "\n",
    "    fig.update_layout(\n",
    "        title_text=None,\n",
    "        title_x=0.5,\n",
    "        width=1500,\n",
    "        showlegend=False\n",
    "    )   \n",
    "    return fig\n",
    "\n",
    "def pie_amount():      \n",
    "    amount_first = payment[payment['Category'] != 'New']['Month Priсe'].sum().astype('int')\n",
    "    amount_others =  (payment[payment['Category'] != 'New']['Paid Amount'].sum() - payment[payment['Category'] != 'New']['Month Priсe'].sum()).astype('int')\n",
    "    pie_source = pd.DataFrame({\n",
    "        'Category': ['First Month Paid', 'Subsequent Months Paid'],\n",
    "        'Amount': [amount_first, amount_others]\n",
    "    })    \n",
    "    aquamarine_colors = ['deepskyblue', 'royalblue']\n",
    "    fig = go.Figure(data=[go.Pie(labels=pie_source['Category'], values=pie_source['Amount'], hole=0.4, marker=dict(colors=aquamarine_colors))])\n",
    "    fig.update_layout(\n",
    "        title_text=\"Distribution of Payment Amounts\", \n",
    "        title_x=0.4,        \n",
    "    )    \n",
    "    return fig\n",
    "\n",
    "def unit():\n",
    "    unit = payment.groupby(['Product', 'Tariff Plan'])['Id'].nunique().reset_index(name='UA')\n",
    "    index_unit = unit.set_index(['Product', 'Tariff Plan']).index\n",
    "    unit['B'] = payment[payment['Category'] != 'New'].groupby(['Product', 'Tariff Plan']).size().reindex(index_unit, fill_value=0).astype(int).values\n",
    "    unit['Students'] = payment[payment['Months of study'] > 0].groupby(['Product', 'Tariff Plan'])['Id'].count().reindex(index_unit, fill_value=0).values\n",
    "    unit['Convers Study'] = (unit['Students'] / unit['B'] * 100).round(1)\n",
    "    return unit\n",
    "    \n",
    "def plot_unit_scatter_shifted():\n",
    "    unit_df = unit()\n",
    "    fig = go.Figure()\n",
    "\n",
    "    # Добавляем кружки для значений 'B' с небольшим смещением\n",
    "    fig.add_trace(go.Scatter(\n",
    "        x=unit_df['Product'] + \" \",  # Смещаем по горизонтали, добавляя текстовую метку\n",
    "        y=unit_df['Tariff Plan'],\n",
    "        mode='markers',\n",
    "        marker=dict(\n",
    "            size=unit_df['B'],   # Размер кружков пропорционален значению 'B'\n",
    "            color='royalblue',\n",
    "            sizemode='area',\n",
    "            sizeref=2.*max(unit_df['B'])/(100.**2),\n",
    "            sizemin=4,\n",
    "        ),\n",
    "        name='Number of First Month Paid',\n",
    "        text=unit_df['B'],  # Подсказки при наведении показывают значение 'B'\n",
    "        hoverinfo='text'\n",
    "    ))\n",
    "\n",
    "    # Добавляем кружки для значений 'Convers Study' без смещения\n",
    "    fig.add_trace(go.Scatter(\n",
    "        x=unit_df['Product'] + \"  \",  # Смещаем по горизонтали, добавляя текстовую метку\n",
    "        y=unit_df['Tariff Plan'],\n",
    "        mode='markers',\n",
    "        marker=dict(\n",
    "            size=unit_df['Convers Study'],  # Размер кружков пропорционален значению 'Convers Study'\n",
    "            color='deepskyblue',\n",
    "            sizemode='area',\n",
    "            sizeref=2.*max(unit_df['Convers Study'])/(100.**2),\n",
    "            sizemin=4,\n",
    "        ),\n",
    "        name='Student Retention, %',\n",
    "        text=unit_df['Convers Study'],  # Подсказки при наведении показывают значение 'Convers Study'\n",
    "        hoverinfo='text'\n",
    "    ))\n",
    "\n",
    "    # Настройка оформления графика\n",
    "    fig.update_layout(\n",
    "        title=dict(text=\"'First Month Paid' and 'Student Retention' by Product and Tariff Plan\", x=0.08, y=0.92),        \n",
    "        xaxis_title=None,\n",
    "        yaxis_title=None,\n",
    "        showlegend=True,\n",
    "        legend=dict(title=None, orientation=\"h\",  yanchor=\"bottom\",  y=1.04,  xanchor=\"right\",  x=1)\n",
    "    )\n",
    "\n",
    "    return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0e3baa47-659d-4f5a-b0a9-b04f124808c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ABOUT \n",
    "tab1_content = [\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            html.H1('IT Online School'),\n",
    "            html.P('*period 2023 - 2024', style={'font-size': '12px'}),\n",
    "        ], width={'size': 4}),\n",
    "        dbc.Col([\n",
    "            html.Div([\n",
    "                    html.P(\"Web Developer\", style={'margin': '0px'}),\n",
    "                    html.P(\"Digital Marketing\", style={'margin': '0px'}),\n",
    "                    html.P(\"UX/UI Design\", style={'margin': '0px'}),\n",
    "                ],style={'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'font-size': '18px'})\n",
    "        ], width={'size': 2, 'offset': 1}),\n",
    "        dbc.Col([\n",
    "            html.Div([\n",
    "                html.H2(count_students(), style={'margin': '0px'}),\n",
    "                html.P(\"students\", style={'margin': '0px', 'font-size': '16px'}),\n",
    "            ],style={'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center'})\n",
    "        ], width={'size': 1, 'offset': 1}),\n",
    "        dbc.Col([\n",
    "            html.Div([\n",
    "                html.H2(count_country(), style={'margin': '0'}),\n",
    "                html.P(\"countries\", style={'margin': '0 0 0 5px', 'font-size': '16px'}),\n",
    "            ],style={'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center'})\n",
    "        ], width={'size': 1, 'offset': 1})\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=cart(), style={'margin': '0'})\n",
    "        ], width={'size': 7}),\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=paid_course())\n",
    "        ], width={'size': 5}),\n",
    "        \n",
    "        ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=country_category(), style={'margin': '0'}),\n",
    "        ], width={'size': 4}),\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=course_category(), style={'margin': '0'}),\n",
    "        ], width={'size': 4}),\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=payment_category(), style={'margin': '0'})\n",
    "        ], width={'size': 4}),\n",
    "        ]),\n",
    "    \n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ece4249e-6f93-47ef-9014-a1f78fbbb2d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#DEALS\n",
    "tab2_content = [\n",
    "    dbc.Row(\n",
    "            html.H1('Deals'),\n",
    "       ),\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=advert_activity(), style={'margin': '0px', 'height':'300px'}),\n",
    "            dcc.Graph(figure=lead_generation(), style={'margin': '0px', 'height':'300px'}),            \n",
    "        ], width={'size': 3}),\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=success_deals(), style={'margin': '0px', 'height':'600px'}),          \n",
    "        ], width={'size': 5}),\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=problem_deals(), style={'margin': '0px', 'height':'600px'}),          \n",
    "        ], width={'size': 4}),\n",
    "        ]),\n",
    "    html.Br(),\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=products(), style={'margin': '0px', 'height':'500px'}),                     \n",
    "        ], width={'size': 8}),\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=funnel(), style={'margin': '0px', 'height':'500px'}),          \n",
    "        ], width={'size': 4}),\n",
    "        ]),\n",
    "    html.Br(),   \n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure= pie_amount(), style={'margin': '0px', 'height':'500px'}),                     \n",
    "        ], width={'size': 4}),\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=plot_unit_scatter_shifted(), style={'margin': '0px', 'height':'500px'}),          \n",
    "        ], width={'size': 8}),\n",
    "        ])\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4955f272-690e-4f2e-b3ef-efaf3fdc149b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#OPERATORS\n",
    "tab3_content = [\n",
    "    dbc.Row(\n",
    "            html.H1('Operators', style={'marginLeft': '60px'}),\n",
    "       ),\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            html.H1(id='table-name', style={'font-size': '28px', 'font-weight': 'bold', 'text-align': 'center', 'margin-top':'60px'}),\n",
    "            html.Div(id='count_persons', style={'font-size': '28px', 'text-align': 'center'}),\n",
    "            html.Div('persons', style={'text-align': 'center', 'font-size': '24px'}),\n",
    "        ], width={'size': 2}),\n",
    "        dbc.Col([\n",
    "            html.H4(id=\"title_avg\", style={'text-align': 'center', 'font-weight': 'normal', 'margin-bottom': '0px'}),\n",
    "            html.Div(id='avg_act_time_content')\n",
    "        ], width={'size': 9}),\n",
    "        \n",
    "        ]),\n",
    "    html.Br(),\n",
    "    html.Br(),\n",
    "    dbc.Row(html.Div([html.H4(\"by Category\", style={'text-align': 'center'})])),\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            html.Br(),\n",
    "            html.Br(),\n",
    "            html.Div([html.Div(id='category_content')], style={'margin': '0'}),            \n",
    "        ], width={'size': 5}),\n",
    "        dbc.Col([\n",
    "            html.Div([html.Div(id='act_category_time_content')], style={'margin': '0'}),\n",
    "        ], width={'size': 7}),\n",
    "        ]),\n",
    "    html.Br(), \n",
    "    dbc.Row([\n",
    "       dcc.Dropdown(\n",
    "            id='table-dropdown',\n",
    "            options=[\n",
    "                {'label': 'All', 'value': 'acts'},\n",
    "                {'label': 'Contacts', 'value': 'cnts'},\n",
    "                {'label': 'Calls', 'value': 'calls'},\n",
    "                {'label': 'Deals', 'value': 'deals'},\n",
    "                {'label': 'Calls Duration', 'value': 'calls duration'},\n",
    "            ],\n",
    "            value='acts',\n",
    "            clearable=False,  # Убирает крестик для очистки выбора\n",
    "            style={'width': '300px', 'marginLeft': '10px'}\n",
    "        )], style={'marginLeft': '0px'}),\n",
    "    dbc.Row(html.Div([html.H4(\"by Operator Names\", style={'text-align': 'center'})])),\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "             html.Div([html.Div(id='operator_load_content')], style={'margin': '0'}),           \n",
    "        ], width={'size': 6}),\n",
    "        dbc.Col([\n",
    "            html.Div([html.Div(id='operator_load_category_content')], style={'margin': '0'}),\n",
    "        ], width={'size': 6}),\n",
    "        ]),    \n",
    "        \n",
    "    \n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ffac5d4-4e99-47e7-b56e-1b93e864fbbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MARKETING\n",
    "tab4_content = [\n",
    "    dbc.Row(html.H1('Marketing')),\n",
    "    html.Br(),\n",
    "    dbc.Row([\n",
    "        dbc.Col(dbc.Card(dbc.CardBody([\n",
    "            html.H3(f'{source['CPA'].mean().round(1)} €', className=\"card-title\"),\n",
    "            html.P(\"Cost per Action (CPA)\", className=\"card-text\",\n",
    "            )]\n",
    "        ),   style={'border': '2px solid #00BFFF',  'box-shadow': '5px 5px 5px rgba(0, 0, 0, 0.2)',   'border-radius': '12px' , 'text-align': 'center'})),\n",
    "         dbc.Col(dbc.Card(dbc.CardBody([\n",
    "            html.H3(f'{source['ARPU'].mean().round(1)} €', className=\"card-title\"),\n",
    "            html.P(\"Average Revenue Per User (ARPU)\", className=\"card-text\",\n",
    "            ),]\n",
    "         ),   style={'border': '2px solid #4169E1',  'box-shadow': '5px 5px 5px rgba(0, 0, 0, 0.2)',   'border-radius': '12px' , 'text-align': 'center'})),\n",
    "        \n",
    "         dbc.Col(dbc.Card(dbc.CardBody([\n",
    "            html.H3(f'{source['CRR'].mean().round(1)} %', className=\"card-title\"),\n",
    "            html.P(\"Cost Revenue Ratio (CRR)\", className=\"card-text\",\n",
    "            ),]\n",
    "         ),   style={'border': '2px solid #00BFFF',  'box-shadow': '5px 5px 5px rgba(0, 0, 0, 0.2)',   'border-radius': '12px' , 'text-align': 'center'})),\n",
    "        \n",
    "         dbc.Col(dbc.Card(dbc.CardBody([\n",
    "            html.H3(f'{source['MER'].mean().round(1)} €', className=\"card-title\"),\n",
    "            html.P(\"Marketing Efficiency Ratio (MER)\", className=\"card-text\",\n",
    "            ),]\n",
    "         ),   style={'border': '2px solid #4169E1',  'box-shadow': '5px 5px 5px rgba(0, 0, 0, 0.2)',   'border-radius': '12px' , 'text-align': 'center'})),\n",
    "        \n",
    "    ],\n",
    "    className=\"mb-4\"),\n",
    "    html.Br(),  \n",
    "    html.Br(),  \n",
    "    dbc.Row([html.H5('Top Campaigns by Metrics', style={'text-align': 'center', 'margin-bottom': '24px'}),\n",
    "            dash_table.DataTable(\n",
    "            data=campaign.round(1).to_dict('records'),  # Все данные\n",
    "            columns=[{'id': c, 'name': c, 'type': 'text'} for c in campaign.columns],          \n",
    "            style_cell={'textAlign': 'center', 'padding': '5px', 'border': '1px solid blue' },                \n",
    "            style_header={\n",
    "                'backgroundColor': '#4169E1',  \n",
    "                'color':'white',\n",
    "                'fontWeight': 'bold'\n",
    "            },\n",
    "             style_data={\n",
    "            'color': 'black',\n",
    "            'backgroundColor': '#f4fbf8'\n",
    "            },\n",
    "            style_cell_conditional=[{'if': {'column_id': 'Campaign'}, 'width': '20%'}],\n",
    "            page_size=10,  \n",
    "            sort_action='native'\n",
    "            \n",
    "          \n",
    "        )]),    \n",
    "    html.Br(),  \n",
    "    #dbc.Row(dcc.Graph(figure=campaign_table(), style={'margin': '0px'})),\n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            dcc.Dropdown(\n",
    "                id='metric-dropdown',\n",
    "                options=[\n",
    "                    {'label': 'CTR, Convers UA, Convers C1', 'value': 'group1'},\n",
    "                    {'label': 'CPC, CAC, CPA', 'value': 'group2'},\n",
    "                    {'label': 'ARPU, CRR, MER', 'value': 'group3'}\n",
    "                ],\n",
    "                value='group1',\n",
    "                clearable=False,\n",
    "                style={'width': '300px', 'marginLeft': '10px'}\n",
    "            ),\n",
    "        ], width={'size': 2}),\n",
    "        dbc.Col([\n",
    "             html.H5(id='title_sourse', style={'text-align': 'center'})\n",
    "        ], width={'size': 8}),\n",
    "        \n",
    "        ]),\n",
    "    dbc.Row(dcc.Graph(id='metric-graph',  style={'margin': '0px'})),\n",
    "    html.Br(), \n",
    "    html.Br(), \n",
    "    dbc.Row([\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=spend_by_month())\n",
    "        ], width={'size': 8}),\n",
    "        dbc.Col([\n",
    "            dcc.Graph(figure=pie_source())\n",
    "        ], width={'size': 4}),\n",
    "        \n",
    "        ]),\n",
    "\n",
    "\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c2aba5d9-ca5d-4db9-96ce-8397550fb636",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x27a57927140>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [ 
    "app = dash.Dash(__name__, external_stylesheets=[dbc.themes.COSMO])\n",
    "colors = px.colors.diverging.Picnic\n",
    "\n",
    "app.layout = html.Div([\n",
    "    dbc.Tabs(\n",
    "    [\n",
    "        dbc.Tab(tab1_content, label=\"About School\", tab_style={'marginLeft': 'auto', 'font-size': '14px'}),\n",
    "        dbc.Tab(tab2_content, label=\"Deals\",  tab_style={'font-size': '14px'}),\n",
    "        dbc.Tab(tab3_content, label=\"Operators\",  tab_style={'font-size': '14px'}),\n",
    "        dbc.Tab(tab4_content, label=\"Marketing\",  tab_style={'font-size': '14px'}),\n",
    "        ], style={'margin-bottom': '12px'}  ),\n",
    "    \n",
    "\n",
    "], style={'margin-left': '60px', 'margin-right': '60px','margin-top': '0px'})\n",
    "\n",
    "@app.callback(\n",
    "    [Output('metric-graph', 'figure'),\n",
    "     Output('title_sourse', 'children')],\n",
    "    [Input('metric-dropdown', 'value')]\n",
    ")\n",
    "def update_table(selected_group):\n",
    "    if selected_group == 'group1':\n",
    "        value_vars = ['CTR', 'Convers UA', 'Convers C1']\n",
    "        title_sourse = \"Sources: CTR, Convers UA, Convers C1\"\n",
    "    elif selected_group == 'group2':\n",
    "        value_vars = ['CPC', 'CAC', 'CPA']\n",
    "        title_sourse = \"Sources: CPC, CAC, CPA\"\n",
    "    else:\n",
    "        value_vars = ['ARPU', 'CRR', 'MER']\n",
    "        title_sourse = \"Sources: ARPU, CRR, MER\"\n",
    "\n",
    "    # Функция для построения графика\n",
    "    figure = sourses_graph(value_vars)\n",
    "\n",
    "    # Возвращаем график и заголовок\n",
    "    return figure, title_sourse\n",
    "    \n",
    "@app.callback(\n",
    "    [Output('table-name', 'children'),\n",
    "    Output('count_persons', 'children'),\n",
    "    Output('avg_act_time_content', 'children'),\n",
    "    Output('title_avg', 'children'),\n",
    "    Output('category_content', 'children'),\n",
    "    Output('act_category_time_content', 'children'),\n",
    "    Output('operator_load_content', 'children'),\n",
    "    Output('operator_load_category_content', 'children'),],\n",
    "    [Input('table-dropdown', 'value')]\n",
    ")\n",
    "\n",
    "def update_table(selected_table):\n",
    "    global acts, cnts, calls, deals\n",
    "    if selected_table == 'acts':\n",
    "        table_name = 'All Activities'\n",
    "        count_persons = acts['Owner Name'].nunique()\n",
    "        df = acts\n",
    "        title_avg = 'Average Load per Operator'\n",
    "    elif selected_table == 'cnts':\n",
    "        table_name = 'Contacts'\n",
    "        count_persons = cnts['Owner Name'].nunique()\n",
    "        df = cnts\n",
    "        title_avg = 'Average Load per Operator'\n",
    "    elif selected_table == 'calls':\n",
    "        table_name = 'Calls'\n",
    "        count_persons = calls['Owner Name'].nunique()\n",
    "        df = calls\n",
    "        title_avg = 'Average Load per Operator'\n",
    "    elif selected_table == 'deals':\n",
    "        table_name = 'Deals'\n",
    "        count_persons = deals['Owner Name'].nunique()\n",
    "        df = deals\n",
    "        title_avg = 'Average Load per Operator'\n",
    "    elif selected_table == 'calls duration':\n",
    "        table_name = 'Calls Duration'\n",
    "        count_persons = calls['Owner Name'].nunique()\n",
    "        df = calls\n",
    "        title_avg = 'Average Call Duration per Operator'\n",
    "    avg_act_time_content = dcc.Graph(figure=avg_act_time(table_name), style={'height': '400px'})\n",
    "    category_content = dcc.Graph(figure=create_category_act(df, table_name), style={'height': '240px', 'color_continuous_scale':'px.colors.sequential.Blues'})\n",
    "    act_category_time_content = dcc.Graph(figure=act_category_time(df, table_name), style={'height': '360px'})\n",
    "    operator_load_content = dcc.Graph(figure=operator_load(table_name), style={'height': '820px'})\n",
    "    operator_load_category_content = dcc.Graph(figure=operator_load_category(df, table_name), style={'height': '820px'})\n",
    "\n",
    "    return table_name, str(count_persons), avg_act_time_content, title_avg, category_content, act_category_time_content, operator_load_content, operator_load_category_content\n",
    "\n",
    "if __name__ == \"__main__\":\n",
			 
    "    app.run_server(debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "7febbe47-6f1d-47d6-9c7a-44076cdfd0bb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "d3cffda6-3b47-4c8f-a66d-54816b6dee9e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (myvenv)",
   "language": "python",
   "name": "myvenv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
